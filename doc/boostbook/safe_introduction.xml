<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//Boost//DTD BoostBook XML V1.1//EN"
"http://www.boost.org/tools/boostbook/dtd/boostbook.dtd">
<section id="safe_numerics.introduction">
  <title>Introduction</title>

  <?dbhtml stop-chunking?>

  <para>This library is intended as a drop-in replacement for all built-in
  integer types in any program which must:</para>

  <itemizedlist>
    <listitem>
      <para>be demonstrably and verifiably correct.</para>
    </listitem>

    <listitem>
      <para>detect every user error such as input, assignment, etc.</para>
    </listitem>

    <listitem>
      <para>be efficient as possible subject to the constraints above.</para>
    </listitem>
  </itemizedlist>

  <section id="safe_numerics.introduction.problem">
    <title>Problem</title>

    <para>Arithmetic operations in C++ are NOT guaranteed to yield a correct
    mathematical result. This feature is inherited from the early days of C.
    The behavior of <code>int</code>, <code>unsigned int</code> and others
    were designed to map closely to the underlying hardware. Computer hardware
    implements these types as a fixed number of bits. When the result of
    arithmetic operations exceeds this number of bits, the result will not be
    arithmetically correct. The following example illustrates this
    problem.</para>

    <programlisting>int f(int x, int y){
    // this returns an invalid result for some legal values of x and y !
    return x + y;
}
</programlisting>

    <para>It is incumbent up the C/C++ programmer to guarantee that this
    behavior does not result in incorrect or unexpected operation of the
    program. There are no language facilities which do this. They have to be
    explicitly addressed in the program code. There are a number of ways to do
    this. See<link linkend="INT32-C"><citation>INT32-C</citation></link> seems
    to recommend the following approach.</para>

    <programlisting>int f(int x, int y){
  if (((y &gt; 0) &amp;&amp; (x &gt; (INT_MAX - y))) 
  || ((y &lt; 0) &amp;&amp; (x &lt; (INT_MIN - y)))) {
    /* Handle error */
  }
  return x + y;
}
</programlisting>

    <para>This will indeed trap the error. However, it would be tedious and
    laborious for a programmer to do alter his code to do. Altering code in
    this way for all arithmetic operations would likely render the code
    unreadable and add another source of potential programming errors. This
    approach is clearly not functional when the expression is even a little
    more complex as is shown in the following example.</para>

    <programlisting>int f(int x, int y, int z){
    // this returns an invalid result for some legal values of x and y !
    return x + y * z;
}
</programlisting>

    <para>This example addresses only the problem of undefined/erroneous
    behavior related to overflow of the addition operation. Similar problems
    occur with other built-in integer types such as unsigned, long, etc. and
    other operations such as subtraction, multiplication etc. . C/C++ often
    automatically and silently convert some integer types to others in the
    course of implementing binary operations and similar problems occur in
    this case as well. Since the problems and their solution are similar,
    We'll confine the current discussion to just this example.</para>
  </section>

  <section id="safe_numerics.introduction.solution">
    <title>Solution</title>

    <para>This library implements special versions of int, unsigned, etc.
    which behave exactly like the original ones EXCEPT that the results of
    these operations are guaranteed to be either arithmetically correct or
    invoke an error. Using this library, the above example would be rendered
    as:</para>

    <programlisting>#include &lt;boost/safe_numeric/safe_integer.hpp&gt;
using namespace boost::numeric;
safe&lt;int&gt; f(safe&lt;int&gt; x, safe&lt;int&gt; y){
  return x + y; // throw exception if correct result cannot be returned
}
</programlisting>

    <para><note>
        <para>Library code in this document resides in the name space
        <code>boost::numeric</code>. This name space has generally been
        eliminated from text, code and examples in order to improve
        readability of the text.</para>
      </note>The addition expression is checked at runtime or (if possible) at
    compile time to trap any possible errors resulting from incorrect
    arithmetic behavior. This will permit one to write arithmetic expressions
    that cannot produce an erroneous result. Instead, one and only one of the
    following is guaranteed to occur.</para>

    <para><itemizedlist>
        <listitem>
          <para>the expression will yield the correct mathematical
          result</para>
        </listitem>

        <listitem>
          <para>the expression will emit a compilation error.</para>
        </listitem>

        <listitem>
          <para>the expression will invoke a runtime exception.</para>
        </listitem>
      </itemizedlist></para>

    <para>In other words, the <emphasis>library absolutely guarantees that no
    arithmetic expression will yield incorrect results</emphasis>.</para>
  </section>

  <section id="safe_numerics.introduction.implementation">
    <title>Implementation</title>

    <para>The library implements special versions of int, unsigned, etc. named
    <code>safe&lt;int&gt;</code>, <code>safe&lt;unsigned int&gt;</code> etc.
    These behave exactly like the underlying types EXCEPT that expressions
    using these types fulfill the above guarantee. These types are meant to be
    "drop-in" replacements for the built-in types they are meant to replace.
    So things which are legal - such as assigning an signed to unsigned value
    are not trapped at compile time - as they are legal C/C++ code - but
    rather checked at runtime to trap the case where this (legal) operation
    would lead to an arithmetically incorrect result.</para>

    <para>Note that the library addresses arithmetical errors generated by
    straightforward C/C++ expressions. Some of these arithmetic errors are
    defined as conforming to C/C++ standard while others are not. So
    characterizing this library as addressing undefined behavior of C/C++
    numeric expressions is misleading.</para>

    <para>All facilities of modern C++/14 are employed to minimize any runtime
    overhead required to make this guarantee. In many cases there is no
    runtime overhead at all. In other cases, a using program can be slightly
    altered to achieve the above guarantee without any runtime
    overhead.</para>
  </section>

  <section id="safe_numerics.introduction.additional_features">
    <title>Additional Features</title>

    <para>Operation of safe types is determined by template parameters which
    specify a pair of <link linkend="safe_numerics.promotion_policies">policy
    classes</link> which specify the behavior for type promotion and error
    handling. In addition to the usage serving as a drop-in replacement for
    standard integer types, Users of the library can:</para>

    <para><itemizedlist>
        <listitem>
          <para>Select or define an exception policy class to specify handling
          of exceptions.<itemizedlist>
              <listitem>
                <para>throw exception or runtime, trap at compile time.</para>
              </listitem>

              <listitem>
                <para>trap at compiler time all operations which might fail at
                runtime.</para>
              </listitem>

              <listitem>
                <para>specify custom functions which should be called at
                runtime</para>
              </listitem>
            </itemizedlist></para>
        </listitem>

        <listitem>
          <para>Select or define a promotion policy class to alter the C++
          type promotion rules. This can be used to <itemizedlist>
              <listitem>
                <para>use C++ native type promotion rules so that, except
                throwing/trapping of exceptions, programs will operate
                identically when using/not using safe types.</para>
              </listitem>

              <listitem>
                <para>replace C++ native promotion rules with ones which are
                arithmetically equivalent but minimize the need for runtime
                checking of arithmetic results.</para>
              </listitem>

              <listitem>
                <para>replace C++ native promotion rules with ones which
                emulate other machine architectures. This is designed to
                permit the testing of C++ code destined to be run on another
                machine on one's development platform. Such a situation often
                occurs while developing code for embedded systems.</para>
              </listitem>
            </itemizedlist></para>
        </listitem>

        <listitem>
          <para>Enforce of other program requirements using ranged integer
          types. The library includes types safe_..._range&lt;Min, Max&gt; and
          safe_literal(...). These types can be used to improve program
          correctness and performance.</para>
        </listitem>
      </itemizedlist></para>
  </section>

  <section id="safe_numerics.introduction.requirements">
    <title>Requirements</title>

    <para>This library is composed entirely of C++ Headers. It requires a
    compiler compatible with the C++14 standard.</para>

    <para>The following Boost Libraries must be installed in order to use this
    library</para>

    <para><itemizedlist>
        <listitem>
          <para>mpl</para>
        </listitem>

        <listitem>
          <para>integer</para>
        </listitem>

        <listitem>
          <para>config</para>
        </listitem>

        <listitem>
          <para>concept checking</para>
        </listitem>

        <listitem>
          <para>tribool</para>
        </listitem>

        <listitem>
          <para>enable_if</para>
        </listitem>
      </itemizedlist>In order to run the test suite, the Boost
    preprocessor library is also required.</para>
  </section>

  <section id="safe_numerics.introduction.scope">
    <title>Scope</title>

    <para>This library currently applies only to built-in integer types.
    Analogous issues arise for floating point types but they are not currently
    addressed by this version of the library. User or Library defined types
    such as arbitrary precision integers can also have this problem. Extension
    of this library to these other types is not currently under development
    but may be addressed in the future. This is one reason why the library
    name is "safe numeric" rather than "safe integer" library.</para>
  </section>
</section>
